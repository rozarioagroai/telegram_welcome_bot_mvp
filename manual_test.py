#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏ PythonAnywhere
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import os
import sys
import time
import asyncio
from pathlib import Path

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_path = Path("/home/JohnBill/telegram_welcome_bot_mvp")
sys.path.insert(0, str(project_path))
sys.path.insert(0, str(project_path / "src"))

# –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
os.chdir(project_path)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (project_path / ".env").exists():
    try:
        from dotenv import load_dotenv
        load_dotenv(project_path / ".env")
    except ImportError:
        print("Loading .env manually...")
        with open(project_path / ".env") as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value

def main():
    print("ü§ñ Telegram Bot Manual Test")
    print("=" * 40)
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
    print("1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (30 —Å–µ–∫—É–Ω–¥)")
    print("2. –°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç (2 –º–∏–Ω—É—Ç—ã)")
    print("3. –î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç (5 –º–∏–Ω—É—Ç)")
    print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        return
    
    if choice == "1":
        run_bot_test(30)
    elif choice == "2":
        run_bot_test(120)
    elif choice == "3":
        run_bot_test(300)
    elif choice == "4":
        check_config()
    elif choice == "5":
        check_database()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def run_bot_test(duration_seconds):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ {duration_seconds} —Å–µ–∫—É–Ω–¥...")
    
    try:
        from telegram.ext import Application
        from src.config import settings
        from src.db_sqlite import Database
        from src.handlers.welcome import welcome_handler
        from src.handlers.access_button import start_access_handler
        from src.handlers.callbacks import captcha_ok_handler, enter_data_handler
        from src.handlers.data import user_data_message_handler
        from src.handlers.admin_actions import admin_approve_handler, admin_deny_handler
        from src.services.throttling import Throttler
        
        async def run_test():
            print("üì° –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            app = Application.builder().token(settings.BOT_TOKEN).build()
            
            print("üíæ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            db = Database(settings.DB_PATH)
            await db.connect()
            await db.migrate()
            
            app.bot_data["db"] = db
            app.bot_data["throttler"] = Throttler()
            app.bot_data["captcha_deadlines"] = {}
            app.bot_data["awaiting_data"] = set()
            
            print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
            from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, filters
            app.add_handler(CommandHandler("start", welcome_handler))
            app.add_handler(CallbackQueryHandler(start_access_handler, pattern="^start_access$"))
            app.add_handler(CallbackQueryHandler(captcha_ok_handler, pattern="^captcha_ok$"))
            app.add_handler(CallbackQueryHandler(enter_data_handler, pattern="^enter_data$"))
            app.add_handler(CallbackQueryHandler(admin_approve_handler, pattern=r"^admin_approve:\d+$"))
            app.add_handler(CallbackQueryHandler(admin_deny_handler, pattern=r"^admin_deny:\d+$"))
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, user_data_message_handler))
            
            await app.initialize()
            await app.start()
            
            print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –†–∞–±–æ—Ç–∞–µ—Ç {duration_seconds} —Å–µ–∫—É–Ω–¥...")
            print("üí¨ –ú–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ Telegram")
            print("‚è±Ô∏è  –ü—Ä–æ–≥—Ä–µ—Å—Å:", end=" ")
            
            start_time = time.time()
            offset = 0
            message_count = 0
            
            while time.time() - start_time < duration_seconds:
                try:
                    updates = await app.updater.bot.get_updates(offset=offset, timeout=5)
                    if updates:
                        for update in updates:
                            await app.process_update(update)
                            offset = update.update_id + 1
                            message_count += 1
                        print(f"üì® +{len(updates)}", end=" ")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    elapsed = int(time.time() - start_time)
                    if elapsed % 10 == 0:
                        remaining = duration_seconds - elapsed
                        print(f"({remaining}s)", end=" ")
                    
                    await asyncio.sleep(1)
                except KeyboardInterrupt:
                    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
                    break
                except Exception as e:
                    print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
                    await asyncio.sleep(2)
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            await app.stop()
            await app.shutdown()
            print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        asyncio.run(run_test())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from src.config import settings
        
        print(f"‚úÖ BOT_TOKEN: {'‚úì —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.BOT_TOKEN else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"‚úÖ CHANNEL_USERNAME: {settings.CHANNEL_USERNAME or '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"‚úÖ ADMIN_IDS: {settings.ADMIN_IDS or '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}")
        print(f"‚úÖ DB_PATH: {settings.DB_PATH}")
        print(f"‚úÖ LOG_LEVEL: {settings.LOG_LEVEL}")
        
        if settings.BOT_TOKEN:
            print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
            import asyncio
            from telegram import Bot
            
            async def test_bot():
                bot = Bot(settings.BOT_TOKEN)
                try:
                    me = await bot.get_me()
                    print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} ({me.first_name})")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
            asyncio.run(test_bot())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from src.config import settings
        from src.db_sqlite import Database
        
        async def test_db():
            db = Database(settings.DB_PATH)
            await db.connect()
            await db.migrate()
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DB_PATH}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            import sqlite3
            conn = sqlite3.connect(settings.DB_PATH)
            cur = conn.cursor()
            
            cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cur.fetchall()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã: {[t[0] for t in tables]}")
            
            # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
            for table in ['users', 'events', 'submissions']:
                try:
                    cur.execute(f"SELECT COUNT(*) FROM {table}")
                    count = cur.fetchone()[0]
                    print(f"üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                except:
                    print(f"‚ö†Ô∏è {table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            conn.close()
        
        asyncio.run(test_db())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

if __name__ == "__main__":
    main()
